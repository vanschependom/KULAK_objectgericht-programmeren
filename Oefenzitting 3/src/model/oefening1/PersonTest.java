package model.oefening1;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.*;/**  * Black-Box Test for the class of Persons involving their gender and marital status.  */public class PersonTest {	@Test	public void testDefaultConstructor() {		Person myFriend =  new Person("Tom");			assertEquals(myFriend.getName(), "Tom");		assertNull(myFriend.getSpouse());	}		@Test	public void testConstructorNullPartner() {		assertThrows(IllegalArgumentException.class, () -> {			Person myFriend =  new Person("Dennis", null);		});	}		@Test	public void testLegalPartner() throws IllegalPartnerException {		Person person1 = new Person("Alice");		Person person2 = new Person("John", person1);		assertEquals(person1.getName(), "Alice");		assertEquals(person2.getName(), "John");		assertEquals(person2.getSpouse(), person1);		assertEquals(person1.getSpouse(), person2);	}		@Test	public void testIllegalPartner() {		assertThrows(IllegalPartnerException.class, () -> {			Person myWife = new Person("Jennifer");			Person myFriend = new Person("Adam");			Person myFriendsPartner = new Person("James", myFriend);			myWife.marry(myFriend);		});	}	@Test	public void testTerminateUnmarried() {		Person myFriend = new Person("Jane");		myFriend.terminate();	}		@Test	public void testTerminateMarried() throws IllegalPartnerException {		Person myMan = new Person("Kristof");		Person myFriend = new Person("Claudia", myMan);				myFriend.terminate();		assertNull(myMan.getSpouse());	}		@Test	public void testLegalMarriage() throws IllegalPartnerException {		Person myMan = new Person("Bart");		Person myFriend = new Person("Anne");				myFriend.marry(myMan);				assertEquals(myFriend.getSpouse(), myMan);		assertEquals(myMan.getSpouse(), myFriend);	}		@Test	public void testDivorceUnmarried() {		Person myFriend = new Person("Steven");				myFriend.divorce();		assertNull(myFriend.getSpouse());	}		@Test	public void testDivorceMarried() throws IllegalPartnerException {		Person myWoman = new Person("Elisabeth");		Person myFriend =  new Person("Jane", myWoman);		myFriend.divorce();		assertNull(myWoman.getSpouse());		assertNull(myFriend.getSpouse());	}		@Test	public void testSwitchPartnerWithUnmarried() {		Person myMan = new Person("Bob");		Person myFriend =  new Person("Alice");    	myFriend.switchPartnerWith(myMan);		assertNull(myFriend.getSpouse());		assertNull(myMan.getSpouse());	}		@Test	public void testSwitchPartnerWithTwoMarried() throws IllegalPartnerException {		Person myMan = new Person("Matthew");		Person myMansWife = new Person("Kate", myMan);		Person myFriend = new Person("James");		Person myFriendsWife = new Person("Mary", myFriend);				myFriend.switchPartnerWith(myMan);				assertEquals(myFriend.getSpouse(), myMansWife);		assertEquals(myMansWife.getSpouse(), myFriend);		assertEquals(myMan.getSpouse(), myFriendsWife);		assertEquals(myFriendsWife.getSpouse(), myMan);	}		@Test	public void testSwitchPartnerWithSingleMarried() throws IllegalPartnerException {		Person myMan = new Person("Matthew");		Person myFriend = new Person("Jennifer");		Person myFriendsWife = new Person("Kate", myFriend);				myFriend.switchPartnerWith(myMan);		assertNull(myFriend.getSpouse());		assertEquals(myMan.getSpouse(), myFriendsWife);		assertEquals(myFriendsWife.getSpouse(), myMan);	}		@Test	public void testSwitchPartnerWithSingleUnmarried() throws IllegalPartnerException {		Person myMan = new Person("Matthew");		Person myMansWife = new Person("Kate", myMan);		Person myFriend = new Person("Paul");				myFriend.switchPartnerWith(myMan);		assertEquals(myFriend.getSpouse(), myMansWife);		assertEquals(myMansWife.getSpouse(), myFriend);		assertNull(myMan.getSpouse());	}		@Test	public void testSwitchPersonWithNullable() {		assertThrows(NullPointerException.class, ()-> {			Person myFriend = new Person("Matthew");			myFriend.switchPartnerWith(null);		});	}		@Test	public void testInspectorIsMarried1() {		Person myFriend = new Person("Matthew");				assertFalse(myFriend.isMarried());	}		@Test	public void testInspectorIsMarried2() throws IllegalPartnerException {		Person myFriend = new Person("Matthew");		Person myFriendsWife = new Person("Kate", myFriend);				assertTrue(myFriend.isMarried());	}		@Test	public void testInspectorHasProperMaritalStatus1() {		Person myFriend = new Person("Matthew");				assertTrue(myFriend.hasProperMaritalStatus());	}		@Test	public void testInspectorHasProperMaritalStatus2() throws IllegalPartnerException {		Person myFriend = new Person("Kate");		Person myMan = new Person("Matthew", myFriend);				assertTrue(myFriend.hasProperMaritalStatus());	}		@Test	public void testCanMarryLegal1() {		Person myFriend = new Person("Matthew");				assertTrue(myFriend.canMarry(new Person("Robin")));	}	@Test	public void testCanMarryLegal2() {		Person myFriend = new Person("Matthew");		Person myMan = new Person("Matthew");		assertTrue(myFriend.canMarry(myMan));	}	@Test	public void testCanMarryIllegal() {		Person myFriend = new Person("Matthew");				assertFalse(myFriend.canMarry(null));	}		@Test	public void testCanMarryAlreadyMarried1() throws IllegalPartnerException {		Person myFriend = new Person("Matthew");		Person myWife = new Person("Kate", new Person("Matthew"));				assertFalse(myFriend.canMarry(myWife));	}		@Test	public void testCanMarryAlreadyMarried2() throws IllegalPartnerException {		Person myFriend = new Person("Matthew", new Person("Leah"));		Person myWife = new Person("Victoria");				assertFalse(myFriend.canMarry(myWife));	}}