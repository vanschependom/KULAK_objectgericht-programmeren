package model.oefening1.ownings;import java.math.BigDecimal;import be.kuleuven.cs.som.annotate.Raw;import model.oefening1.exceptions.*;import model.oefening1.persons.Person;/** * A class of dogs as a special kind of ownable. In addition to a value * and an owner, dogs have a name and a minimal amount of food they need * every day. *  * @invar   The name of each dog must be a valid name for a dog. *          | isValidName(getName()) * @invar   The daily food amount needed by each dog must be a valid *          daily food amount for a dog. *          | isValidDailyFoodAmount(getDailyFoodAmount()) */public class Dog extends Ownable {	/**	 * Variable referencing the name of this dog.	 *	 * @invar   The registered name is a legal name for any dog.	 *          | isValidName(name)	 */	private String name = "Nameless";	/**	 * Variable registering the daily food amount needed by this dog.	 *	 * @invar   The registered daily food amount must be a valid	 *          daily food amount for a dog.	 *          | isValidDailyFoodAmount(dailyFoodAmount)	 */	private int dailyFoodAmount = 0;	/**	 * Initialize this new dog with given owner, given value, given name and	 * given daily amount of food.	 *	 * @param   owner	 *          The owner for this new dog.	 * @param   value	 *          The value of this new dog.	 * @param   name	 *          The name of this new dog.	 * @param   dailyFoodAmount	 *          The daily food amount needed by this new dog.	 * @effect 	This new dog is initialized as a new ownable with	 *          given owner and given value.	 *          | super(owner,value)	 * @effect  The name of this new dog is set to the given name.	 *          | setName(name)	 * @effect  The daily food amount needed by this new dog is set	 *          to the given daily food amount.	 *          | setDailyFoodAmount(dailyFoodAmount)	 */	public Dog(Person owner, BigDecimal value, String name, int dailyFoodAmount)			throws IllegalValueException, IllegalOwnerException,			IllegalNameException, IllegalFoodAmountException {		super(owner, value);		setName(name);		setDailyFoodAmount(dailyFoodAmount);	}	/**	 * Initialize a dag with the given value, name and dailyFoodAmount.	 * The owner of this new dog object will be set to null.	 * @param value The value of the dog.	 * @param name  The name of the dag.	 * @param dailyFoodAmount  The amount of food the dog eats on a daily basis.	 * @effect  The name of this new dog is set to the given name.	 *          | setName(name)	 * @effect  The daily food amount needed by this new dog is set	 *          to the given daily food amount.	 *          | setDailyFoodAmount(dailyFoodAmount)	 * @effect  The value of this new dog is set to the given value.	 * 			| setValue(value)	 */	public Dog(BigDecimal value, String name, int dailyFoodAmount)			throws IllegalNameException, IllegalFoodAmountException, IllegalValueException {		this.setName(name);		this.setValue(value);		this.setDailyFoodAmount(dailyFoodAmount);	}	/**	 * Initialize this new dog with given name, having no owner,	 * a value of 0, and a daily food amount of 500.	 *	 * @param   name	 *          The name for this new dog.	 * @effect  This new dog is initalized with no owner, a value	 *          of 0, given name, and a daily food amount of 500.	 *          | this(null,BigDecimal.ZERO,name,500)	 */	public Dog(String name) throws IllegalNameException {		try {			setName(name);			setDailyFoodAmount(500);		} catch (IllegalFoodAmountException exc) {			assert false;		}	}	/**	 * Return the name of this dog.	 */	@Raw	public String getName() {		return this.name;	}	/**	 * Check whether this dog can have the given name	 * as its name.	 *	 * @param   name	 *          The name to check.	 * @return  True if the given name is effective and not empty;	 *          false otherwise.	 *          | result ==	 *          |  (name != null) && (name.length() > 0)	 */	public static boolean isValidName(String name) {		try {			return (name.length() > 0);		} catch (NullPointerException exc) {			assert (name == null);			return false;		}	}	/**	 * Set the name of this dog to the given name.	 *	 * @param   name	 *          The new name for this dog.	 * @post    The name of this dog is the same as the	 *          given name.	 *          | new.getName() == name	 * @throws  IllegalNameException [must]	 *          The given name is not a legal name for any dog and	 *          this dog is not yet terminated.	 *          | (! isTerminated()) && (! isValidName(name))	 * @throws  IllegalStateException [must]	 *          This dog is already terminated.	 *          | isTerminated()	 */	@Raw	public void setName(String name) throws IllegalNameException {		if (isTerminated())			throw new IllegalStateException("Dog already terminated!");		if (!isValidName(name))			throw new IllegalNameException(name);		this.name = name;	}	/**	 * Return the daily food amount needed by this dog.	 */	@Raw	public int getDailyFoodAmount() {		return this.dailyFoodAmount;	}	/**	 * Check whether the given daily food amount is a valid	 * daily food amount for any dog.	 *	 * @param   dailyFoodAmount	 *          The daily food amount to check.	 * @return  True if the given daily food amount is positive;	 *          false otherwise.	 *          | result == (amount > 0)	 */	public static boolean isValidDailyFoodAmount(int dailyFoodAmount) {		return dailyFoodAmount > 0;	}	/**	 * Set the daily food amount needed by this dog to the given	 * daily food amount.	 *	 * @param   dailyFoodAmount	 *          The new daily food amount for this dog.	 * @post    The daily food amount of this dog is equal to the	 *          given daily food amount.	 *          | new.getDailyFoodAmount() == dailyFoodAmount	 * @throws  IllegalStateException [must]	 *          This dog is already terminated.	 *          | isTerminated()	 * @throws  IllegalFoodAmountException [must]	 *          This dog is not terminated, and the given daily food	 *          amount is not a valid daily food amount for a dog.	 *          | (! isTerminated()) &&	 *          | (! isValidDailyFoodAmount(dailyFoodAmount))	 */	@Raw	public void setDailyFoodAmount(int dailyFoodAmount)			throws IllegalFoodAmountException {		if (isTerminated())			throw new IllegalStateException("Dog already terminated!");		if (!isValidDailyFoodAmount(dailyFoodAmount))			throw new IllegalFoodAmountException(dailyFoodAmount);		this.dailyFoodAmount = dailyFoodAmount;	}}