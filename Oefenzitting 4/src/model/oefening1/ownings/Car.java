package model.oefening1.ownings;import java.math.BigDecimal;import java.math.BigInteger;import java.math.RoundingMode;import java.time.Instant;import java.time.LocalDateTime;import java.time.ZoneId;import java.time.temporal.ChronoUnit;import java.util.Date;import be.kuleuven.cs.som.annotate.Raw;import model.oefening1.persons.Person;import model.oefening1.*;/** * A class of cars as a special kind of ownable. In addition to a * value and an owner, cars have a motor volume. *  * @invar   The motor volume of each car must be a valid motor volume *          for a car. *          | isValidMotorVolume(getMotorVolume()) * @note    For purposes of illustration, all additional properties *          ascribed to cars are worked out in a total way. */public class Car extends Ownable {	/**	 * Variable referencing the motor volume of this car.	 *	 * @invar   The registered motor volume is a valid motor volume	 *          for a car.	 *          | isValidMotorVolume(motorVolume)	 */	private int motorVolume = 1000;	/**	 * Variable referencing the date at which this car was built.	 * @invar  The registered data is a valid date.	 *         | isValidBuildDate(buildDate)	 */	private Date buildDate;	// 5 years (simplified) before the car reaches its minimal value	private static final int DAYS_BEFORE_MINIMAL_VALUE = 365 * 5;	// The minimal value (percentage wise) a car can have	private static final BigDecimal MINIMAL_RELATIVE_VALUE_REDUCTION = BigDecimal.valueOf(0.5);		/**	 * Initialize this new car with a given owner, a given value	 * a given motor volume and a given build date.	 *	 * @param   owner  The owner for this new car.	 * @param   value  The value for this new car.	 * @param   motorVolume  The motor volume for this new car.	 * @param   buildDate  The build date of the car.	 * @effect 	This new car is initialized as a new ownable with	 *          given owner and given value.	 *          | super(owner,value)	 * @effect 	This new car is initialized with the given buildDate.	 *          | setBuildDate(buildDate)	 * @post    If the given motor volume is a valid motor volume for	 *          a car, the motor volume of this new car is equal to the	 *          given motor volume; otherwise, the motor volume of this	 *          new car is equal to 1000.	 *          | if (isValidMotorVolume(motorVolume))	 *          |   then (new.getMotorVolume() = motorVolume)	 *          |   else (new.getMotorVolume() = 1000)	 */	public Car(Person owner, BigDecimal value, int motorVolume, Date buildDate)			throws IllegalValueException, IllegalOwnerException, IllegalArgumentException {		super(owner, value);		this.setMotorVolume(motorVolume);		this.setBuildDate(buildDate);	}	/**	 * Initialize this new car with no owner, a given value	 * a given motor volume and a given build date.	 *	 * @param   value  The value for this new car.	 * @param   motorVolume  The motor volume for this new car.	 * @param   buildDate  The build date of the car.	 * @effect 	This new car is initialized with the given value.	 *          | setValue(value)	 * @effect 	This new car is initialized with the given buildDate.	 *          | setBuildDate(buildDate)	 * @post    If the given motor volume is a valid motor volume for	 *          a car, the motor volume of this new car is equal to the	 *          given motor volume; otherwise, the motor volume of this	 *          new car is equal to 1000.	 *          | if (isValidMotorVolume(motorVolume))	 *          |   then (new.getMotorVolume() = motorVolume)	 *          |   else (new.getMotorVolume() = 1000)	 */	public Car(BigDecimal value, int motorVolume, Date buildDate)			throws IllegalValueException, IllegalArgumentException {		super();		this.setValue(value);		this.setMotorVolume(motorVolume);		this.setBuildDate(buildDate);	}	/**	 * Initialize this new car with a motor volume of 1000, having no owner,	 * a value of 0, and a build date of the current date.	 *	 * @effect  This new car is initialized with no owner, a value	 *          of 0, a motor volume of 1000 and a build date of the current date.	 *          | this(null,BigInteger.ZERO,1000, Date.from(Instant.now()))	 */	public Car() {		this.setBuildDate(Date.from(Instant.now()));	}	/**	 * Return the motor volume of this car.	 */	@Raw	public int getMotorVolume() {		return this.motorVolume;	}	/**	 * Return the build date of this car.	 */	@Raw	public Date getBuildDate() {		return this.buildDate;	}	@Override @Raw	public BigDecimal getValue() {		if (this.getBuildDate() == null) {			return super.getValue();		}		// Calculate the difference in terms of days between the current date and the build date		// The initial difference is expressed in milliseconds, and is therefore converted to days		int daysBetween = (int) (Instant.now().minusMillis(this.getBuildDate().toInstant().toEpochMilli())				.toEpochMilli() / 1000.0 / 60.0 / 60.0 / 24.0);		BigDecimal reduction;		if (daysBetween <= 0) {			reduction = BigDecimal.valueOf(1.0);		} else {			BigDecimal valueLossProgress = BigDecimal.valueOf(daysBetween)					.divide(BigDecimal.valueOf(Car.DAYS_BEFORE_MINIMAL_VALUE), 4, RoundingMode.DOWN);			// reduction = 1.0 - valueLossProgress * (1.0 - MINIMAL_RELATIVE_VALUE_REDUCTION)			reduction = BigDecimal.valueOf(1.0)					.subtract(valueLossProgress.multiply(							BigDecimal.valueOf(1.0).subtract(Car.MINIMAL_RELATIVE_VALUE_REDUCTION)					));			// Limit the value reduction to the Minimal relative amount			if (reduction.compareTo(Car.MINIMAL_RELATIVE_VALUE_REDUCTION) < 0) {				reduction = Car.MINIMAL_RELATIVE_VALUE_REDUCTION;			}		}		return super.getValue().multiply(reduction);	}	/**	 * Check whether the given motor volume is a valid motor	 * volume for any car.	 *	 * @param   motorVolume	 *          The motor volume to check.	 * @return  False if the given volume is not positive;	 *          undefined otherwise.	 *          | if (volume <= 0)	 *          |   then result == false	 * @note    In the specification of this method we leave room	 *          to impose an upper limit on the motor volume of	 *          (some) cars.	 */	public static boolean isValidMotorVolume(int motorVolume) {		return motorVolume >= 0;	}	/**	 * Set the motor volume of this car to the given motor volume.	 *	 * @param   motorVolume	 *          The new motor volume for this car.	 * @post    If this car has not been terminated yet, and if	 *          the given motor volume is a valid motor volume	 *          for a car, the motor volume of this car is equal	 *          to the given motor volume.	 *          | if ( (! isTerminated()) &&	 *          |      isValidMotorVolume(motorVolume) )	 *          |   then (new.getMotorVolume() == motorVolume)	 */	@Raw	public void setMotorVolume(int motorVolume) {		if ((!isTerminated()) && isValidMotorVolume(motorVolume))			this.motorVolume = motorVolume;	}	/**	 * Set the build date of this car.	 * @throws IllegalArgumentException  If the given date is not effective.	 * 									 | date == null	 */	@Raw	public void setBuildDate(Date date) throws IllegalArgumentException {		if (!this.isValidBuildDate(date)) {			throw new IllegalArgumentException("Build date of a car cannot be null");		}		this.buildDate = date;	}	/**	 * Check whether the given date is valid.	 * @param date The date object to check.	 * @return True if the given date is effective, false otherwise.	 * 		   | date != null	 */	@Raw	public boolean isValidBuildDate(Date date) {		return date != null;	}	@Override	public void terminate() {		super.terminate();		this.buildDate = null;	}}