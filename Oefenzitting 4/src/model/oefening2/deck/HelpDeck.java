package deck;/** * A class of help decks containing cards. A help desk serves to * store cards temporarily. *    See superclass. */public class HelpDeck extends CardDeck {    /**     * Initialize a new empty help deck.     *     * @param     capacity     *            The maximum number of cards allowed on the new     *            help deck.     * @pre       The given capacity may not be negative.     *            | capacity >= 0     * @effect    The capacity of the new help deck is set to the     *            given capacity.     *            | getCapacity() = capacity     * @effect    The new help deck does not contain any cards.     *            | getNbCards() = 0     */    public HelpDeck(int capacity) {        super(capacity);    }    /**     * Check whether the card on top of this help desk can be added     * on top of the given target deck.     *    See superclass.     *     * @param   target     *          The target deck upon which the top card should fit.     * @return  True if this help deck has not reached its minimal size,     *          if the given target deck is effective, and if the target     *          deck can have the card on top of this help deck as its     *          own top; false otherwise.     *          | (not hasMinimalSize()) and (target <> null) and     *          | (target.canHaveAsTop(getTop()))     */    public boolean topMatchesOn(TargetDeck target) {        try {            return (!hasMinimalSize()) && (target.canHaveAsTop(getTop()));        } catch (NullPointerException exc) {            return false;        }    }    /**     * Check whether the card on top of this from deck can be     * added on top of the given help deck.     *     * @param helpDeck The deck upon which the top card should fit.     * @return False if this from deck has reached its minimal     * size, if the given help deck is not effective,     * or if the help deck can not have the card on top     * of this from deck as its own top; undetermined     * otherwise.     * | if (hasMinimalSize())     * |   result = false     * | if (helpDeck = null)     * |   result = false     * | if (helpDeck.canHaveAsTop(getTop()))     * |   result = false     */    @Override    public boolean topMatchesOn(HelpDeck helpDeck) {        return false;    }}